//Save this code in MainActivity.kt it is single file 

package com.example.myapplication


import android.content.ContentValues
import android.content.Context
import androidx.compose.material.icons.filled.Add
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.myapplication.ui.theme.MyApplicationTheme


// Database Helper Class
class TaskDatabaseHelper(context: Context) : SQLiteOpenHelper(context, "tasks.db", null, 1) {
   override fun onCreate(db: SQLiteDatabase) {
       db.execSQL("CREATE TABLE tasks (id INTEGER PRIMARY KEY, title TEXT, description TEXT, status TEXT)")
   }


   override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
       db.execSQL("DROP TABLE IF EXISTS tasks")
       onCreate(db)
   }
}


class MainActivity : ComponentActivity() {
   override fun onCreate(savedInstanceState: Bundle?) {
       super.onCreate(savedInstanceState)
       enableEdgeToEdge()
       setContent {
           MyApplicationTheme {
               TaskManagerScreen()
           }
       }
   }
}


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TaskManagerScreen() {
   val context = LocalContext.current
   val dbHelper = remember { TaskDatabaseHelper(context) }
   var searchQuery by remember { mutableStateOf(TextFieldValue("")) }
   var showDialog by remember { mutableStateOf(false) }
   var tasks by remember { mutableStateOf(getTasks(dbHelper)) }


   Scaffold(
       topBar = {
           TopAppBar(
               title = { Text("Task Manager") },
               actions = {
                   IconButton(onClick = {
                       Toast.makeText(context, "Navigating to Settings", Toast.LENGTH_SHORT).show()
                   }) {
                       Icon(Icons.Default.Settings, contentDescription = "Settings")
                   }


                   // Search field
                   TextField(
                       value = searchQuery,
                       onValueChange = { searchQuery = it },
                       placeholder = { Text("Search tasks") },
                       modifier = Modifier.fillMaxWidth(0.6f)
                   )
               }
           )
       },
       floatingActionButton = {
           FloatingActionButton(onClick = { showDialog = true }) {
               Icon(Icons.Default.Add, contentDescription = "Add Task")
           }
       }
   ) { innerPadding ->
       Column(modifier = Modifier.padding(innerPadding)) {
           TaskList(tasks, dbHelper, onUpdate = { tasks = getTasks(dbHelper) })
           if (showDialog) {
               AddTaskDialog(dbHelper, onDismiss = {
                   showDialog = false
                   tasks = getTasks(dbHelper)
               })
           }
       }
   }
}


@Composable
fun TaskList(tasks: List<Task>, dbHelper: TaskDatabaseHelper, onUpdate: () -> Unit) {
   LazyColumn {
       items(tasks) { task ->
           Card(
               modifier = Modifier.fillMaxWidth().padding(8.dp),
               elevation = CardDefaults.cardElevation(4.dp)
           ) {
               Column(modifier = Modifier.padding(16.dp)) {
                   Text(text = task.title, style = MaterialTheme.typography.titleLarge)
                   Text(text = task.description, style = MaterialTheme.typography.bodyMedium)
                   Text(text = "Status: ${task.status}", style = MaterialTheme.typography.labelSmall)
                   Row {
                       Button(onClick = {
                           updateTaskStatus(dbHelper, task.id, "completed")
                           onUpdate()
                       }) {
                           Text("Mark as Completed")
                       }
                       Spacer(modifier = Modifier.width(8.dp))
                       Button(onClick = {
                           deleteTask(dbHelper, task.id)
                           onUpdate()
                       }) {
                           Text("Delete Task")
                       }
                   }
               }
           }
       }
   }
}


@Composable
fun AddTaskDialog(dbHelper: TaskDatabaseHelper, onDismiss: () -> Unit) {
   var title by remember { mutableStateOf("") }
   var description by remember { mutableStateOf("") }


   AlertDialog(
       onDismissRequest = onDismiss,
       title = { Text("Add Task") },
       text = {
           Column {
               TextField(value = title, onValueChange = { title = it }, placeholder = { Text("Title") })
               TextField(value = description, onValueChange = { description = it }, placeholder = { Text("Description") })
           }
       },
       confirmButton = {
           Button(onClick = {
               addTask(dbHelper, title, description)
               onDismiss()
           }) { Text("Save") }
       },
       dismissButton = {
           Button(onClick = onDismiss) { Text("Cancel") }
       }
   )
}


// Data Model
data class Task(val id: Int, val title: String, val description: String, val status: String)


// Database Operations
fun getTasks(dbHelper: TaskDatabaseHelper): List<Task> {
   val db = dbHelper.readableDatabase
   val cursor = db.rawQuery("SELECT * FROM tasks", null)
   val tasks = mutableListOf<Task>()
   while (cursor.moveToNext()) {
       tasks.add(
           Task(
               cursor.getInt(0),
               cursor.getString(1),
               cursor.getString(2),
               cursor.getString(3)
           )
       )
   }
   cursor.close()
   return tasks
}


fun addTask(dbHelper: TaskDatabaseHelper, title: String, description: String) {
   val db = dbHelper.writableDatabase
   val values = ContentValues().apply {
       put("title", title)
       put("description", description)
       put("status", "pending")
   }
   db.insert("tasks", null, values)
}


fun updateTaskStatus(dbHelper: TaskDatabaseHelper, taskId: Int, status: String) {
   val db = dbHelper.writableDatabase
   val values = ContentValues().apply { put("status", status) }
   db.update("tasks", values, "id = ?", arrayOf(taskId.toString()))
}


fun deleteTask(dbHelper: TaskDatabaseHelper, taskId: Int) {
   val db = dbHelper.writableDatabase
   db.delete("tasks", "id = ?", arrayOf(taskId.toString()))
}


@Preview(showBackground = true)
@Composable
fun TaskManagerPreview() {
   MyApplicationTheme {
       TaskManagerScreen()
   }
}
